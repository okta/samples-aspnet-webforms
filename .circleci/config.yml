# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  windows: circleci/windows@5.0
  general-platform-helpers: okta/general-platform-helpers@1.9
  platform-helpers: okta/platform-helpers@1
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@5.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    executor:
      name: windows/default
    steps:
      - checkout

      - run:
          name: "Install required components"
          command: |
              choco install -y dotnetcore-sdk
              
      - run: dotnet --version

      - run:
          name: build okta-hosted-login to scan
          command: ./okta-hosted-login/build.sh

      - run:
          name: build self-hosted-login to scan
          command: ./self-hosted-login/build.sh

      - run:
          name: build social-login to scan
          command: ./social-login/build.sh

      - persist_to_workspace:
          root: ~/project
          paths:
            - src
            - .git
            # Persist the entire subdirectories, ensuring all relevant files are available
            - okta-hosted-login
            - self-hosted-login
            - social-login

      - run:
          name: Install Python
          command: |
            choco install python --version=3.9.0 -y
            python --version
            python -m pip install --upgrade pip

      - run:
          name: Download Reverse Labs Scanner
          command: |
            curl.exe https://dso-resources.oktasecurity.com/scanner  -H "x-api-key: $env:DSO_RLSECURE_TOKEN" -o rl_wrapper-0.0.2+35ababa-py3-none-any.whl
      - run:
          name: Install RL Wrapper
          command: |
            pip install ./rl_wrapper-0.0.2+35ababa-py3-none-any.whl

  reversinglabs-scan:
    docker:
      - image: cimg/python:3.10
    steps:
      - run:
          command: >
            echo "export ARTIFACT_DIR=$(echo
            "${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}/path/to/my/directory")" >>
            "$BASH_ENV"

            echo "export ARTIFACT_COMMIT=$(echo "${CIRCLE_SHA1:0:8}")" >>
            "$BASH_ENV"

            source "$BASH_ENV"
          name: Set environment variables
      - platform-helpers/step-reversinglabs-scan:
          artifact-commit: $ARTIFACT_COMMIT
          artifact-dir: $ARTIFACT_DIR
          artifact-name: my-artifact-name

  snyk-scan:
    docker:
      - image: cimg/python:3.10 # Base image with Python for the orb

    steps:
      - attach_workspace:
          at: ~/project # Attach workspace containing checked-out code

      # Step 1: Install .NET SDK (Required for restoring other projects)
      - run:
          name: Install .NET SDK
          command: |
            sudo apt-get update
            # Install SDK version compatible with restoring net48 projects (e.g., 6.0, 7.0)
            sudo apt-get install -y dotnet-sdk-7.0
            dotnet --version

      # Step 2: Restore Dependencies for main projects (Best effort before modification)
      # Snyk primarily needs the packages.config modified, but restoring others helps avoid ENOENT errors for those.
      - run:
          name: Restore NuGet Dependencies (Main Projects)
          working_directory: ~/project
          command: |
            dotnet restore okta-hosted-login/okta-aspnet-webforms-example/okta-aspnet-webforms-example.csproj || echo "Restore failed for okta-hosted, continuing..."
            dotnet restore self-hosted-login/okta-aspnet-webforms-example/okta-aspnet-webforms-example.csproj || echo "Restore failed for self-hosted, continuing..."
            dotnet restore social-login/okta-aspnet-webforms-example/okta-aspnet-webforms-example.csproj || echo "Restore failed for social-login, continuing..."
            # We won't try restoring tools/ packages.config here, relying on the modification below for Snyk.

      # Step 3: Install xmlstarlet (Required for the modification script)
      - run:
          name: Install xmlstarlet
          command: sudo apt-get update && sudo apt-get install -y xmlstarlet

      # Step 4: Prep packages.config using xmlstarlet (Your provided logic)
      - run:
          name: Prep packages.config for Snyk (.NET Framework)
          working_directory: ~/project # Ensure find starts from the project root
          environment:
            # --- Adjust these values for your project ---
            DOTNET_TARGET_FRAMEWORK_VERSION: net48 # Correct framework for v4.8
            PACKAGE_ID: "Cake"                   # List package IDs needing the attribute (space-separated)
                                                 # Check your tools/packages.config files for exact IDs
          # Use the script logic you provided, slightly adapted for better find usage
          command: |
            #!/bin/bash
            echo "Adding targetFramework=${DOTNET_TARGET_FRAMEWORK_VERSION} to packages: ${PACKAGE_ID}"
            # Ensure PACKAGE_ID is treated as separate words
            read -r -a package_ids <<< "$PACKAGE_ID"

            # Use find -print0 and while read loop for safety with filenames
            find . -name "packages.config" -type f -print0 | while IFS= read -r -d $'\0' file; do
              echo "Processing file: $file"
              for n in "${package_ids[@]}"; do
                # Add attribute if missing for this package ID
                xmlstarlet ed --inplace --quiet \
                  -i "//package[@id='$n'][not(@targetFramework)]" \
                  -t attr -n "targetFramework" -v "${DOTNET_TARGET_FRAMEWORK_VERSION}" \
                  "$file"
                # Update attribute if it's 'native' for this package ID
                xmlstarlet ed --inplace --quiet \
                  -u "//package[@id='$n'][@targetFramework='native']/@targetFramework" \
                  -v "${DOTNET_TARGET_FRAMEWORK_VERSION}" \
                  "$file"
              done
            done
            echo "Finished prepping packages.config files."
            # Optional: Verify changes in a specific file if needed
            echo "Checking content of a tools packages.config (example):"
            cat ./okta-hosted-login/tools/packages.config || echo "File not found or cat failed"


      # Step 5: Run Snyk Orb Steps (Should now work with modified packages.config)
      - general-platform-helpers/step-load-dependencies
      - general-platform-helpers/step-run-snyk-monitor:
          scan-all-projects: true   # Scan all, including the now-modified tool packages
          skip-unresolved: false  # Keep false
          run-on-non-main: true
          detection-depth: 4
          # No exclude needed

workflows:
  "Circle CI Tests":
    jobs:
      - build:
          context:
            - static-analysis
      - snyk-scan:
          name: execute-snyk
          context:
            - static-analysis
          requires:
            - build